R.Version()
load("/Users/maden/scratch/consensusML/cml_share/borutadat_1.rda")
x <- bdat$ImpHistory
x
dim(x)
rownames(x)
x[1,1]
x[1,2]
x[2,1]
bdat$impSource
bdat$finalDecision
table(bdat$finalDecision)
bdat$light
bdat$maxRuns
bdat$mcAdj
bdat$roughfixed
bdat$call
bdat$ImpHistory
hist(x[,1])
hist(x[,2])
hist(x[,3])
table(bdat$finalDecision)
names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid <- names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid
hist(x[,cid[1]])
hist(x[,cid[2]])
hist(x[,cid[3]])
hist(x[,cid[4]])
hist(x[,cid[5]])
summary(x[,cid[1]])
summary(x[,cid[2]])
x[,cid[1]]
x[,cid[2]]
bdat$pValue
bdat$finalDecision
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm_md-decision-list.rda")
lx <- gsm.anno.decision.list
lx$GSM2334191
load("~/scratch/analysis_scratch/analysis_final_files/rs33k-gsmjsonfilt.rda")
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-manualanno-termfreqdflist.rda")
rmanno.list$age_dfs$age
head(rmanno.list$age_dfs$age)
rmanno.list$age_dfs$age[c(1:50),]
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm-metadata_naive-summary.rda")
head(rmsd)
head(rmsmd)
?pca
?princomp
setwd("~/scratch/consensusML/manuscript_draft/programming_resources/boruta_supplement")
?randomForest
library(randomForest)
?randomForest
?randomForest::importance
?xgb.importance
library(xgboost)
?xgb.importance
# analyze boruta permutations bootstraps
library(UpSetR)
library(grid)
info.bbs <- function(savefn, destpath, summplotname ){
# get boruta bootstraps info
# Arguments
# * savefn : filename or path to save robject
# * destpath : path to read in boruta r-results iterables from
# * summplotname : name or path of summary plot to save
lfli <- list.files(destpath)
dlbs <- list()
nns <- seq(1,length(lfli),1)
for(i in 1:length(nns)){
load(paste0(destpath,"/",
lfli[grepl(paste0("_",i,".rda"),lfli)]))
dlbs[[paste0("iter",i)]] <- bdat
message(i)
}
# bsm bootstraps matrix
genesi <- names(dlbs$iter1$finalDecision)
bsm <- matrix(nrow=0, ncol=length(genesi))
for(g in 1:length(dlbs)){
bsm <- rbind(bsm, as.character(dlbs[[g]]$finalDecision))
}
colnames(bsm) <- genesi
# get most frequently confirmed genes
dff <- data.frame(gid=genesi, stringsAsFactors = F)
dff$perc.confirmed <- dff$num.confirmed <- dff$num.tent <- dff$num.rej <- 0
for(i in 1:ncol(bsm)){
gii <- bsm[,i]
# counts
dff$num.conf[i] <- length(gii[gii=="Confirmed"])
dff$num.tent[i] <- length(gii[gii=="Tentative"])
dff$num.rej[i] <- length(gii[gii=="Rejected"])
# percents
dff$perc.conf[i] <- 100*(length(gii[gii=="Confirmed"])/length(gii))
dff$perc.tent[i] <- 100*(length(gii[gii=="Tentative"])/length(gii))
dff$perc.rej[i] <- 100*(length(gii[gii=="Rejected"])/length(gii))
message(i)
}
dff <- dff[rev(order(dff$perc.conf)),]
# save r object
rl <- list("bdat.iter"=dlbs,
"feature.statfreq"=dff,
"results.matrix"=bsm)
save(rl, file=savefn)
# save composite summary plot
jpeg(summplotname,8,8,units="in",res=400)
par(mfrow=c(2,2), oma=c(4,2,2,2))
plot(dff$perc.conf, dff$num.conf,
xlab=paste0("% Confirmed\n(Num. Bootstrap Iter. = ",nrow(bsm),")"),
ylab="Num. Confirmed (N Iter.)")
plot(dff$perc.rej, dff$perc.conf,
xlab="% Rejected (N Iter.)",
ylab="% Confirmed (N Iter.)")
plot(dff$perc.tent, dff$perc.conf,
xlab="% Tentative (N Iter.)",
ylab="% Confirmed (N Iter.)")
boxplot(dff[,c("perc.conf","perc.tent","perc.rej")],
ylab="% Iterations", main="Status Freq. by Feature",
xlab="", cex.axis=0.8,
las=2)
dev.off()
}
# nrank
savefn <- "bbs-nrank_rlist.rda"
destpath <- "borutaiter/nrank"
summplotname <- "bbs-nrank_compplot.jpg"
info.bbs(savefn, destpath, summplotname)
# random forest
savefn <- "bbs-rf_rlist.rda"
destpath <- "borutaiter/rf"
summplotname <- "bbs-rf_compplot.jpg"
info.bbs(savefn, destpath, summplotname)
# svm
savefn <- "bbs-svm_rlist.rda"
destpath <- "borutaiter/svm"
summplotname <- "bbs-svm_compplot.jpg"
info.bbs(savefn, destpath, summplotname)
# xgb
savefn <- "bbs-xgb_rlist.rda"
destpath <- "borutaiter/xgb"
summplotname <- "bbs-xgb_compplot.jpg"
info.bbs(savefn, destpath, summplotname)
# lasso
savefn <- "bbs-lasso_rlist.rda"
destpath <- "borutaiter/lasso"
summplotname <- "bbs-lasso_compplot.jpg"
info.bbs(savefn, destpath, summplotname)
fl <- c("bbs-nrank_rlist.rda",
"bbs-svm_rlist.rda",
"bbs-rf_rlist.rda",
"bbs-xgb_rlist.rda",
"bbs-lasso_rlist.rda")
load("~/scratch/consensusML/boruta_supplement/bbs-nrank_rlist.rda")
genesi <- names(rl$bdat.iter$iter1$finalDecision)
um <- data.frame(geneid=genesi, stringsAsFactors = F)
um$nrank <- um$svm <- um$rf  <- um$xgb <- um$lasso <- 0
for(f in 1:length(fl)){
load(fl[f])
gff <- rl$feature.statfreq
gffid <- gff[gff$num.conf>0,]$gid
um[um$geneid %in% gffid, f+1] <- 1
message(f)
}
upset(um, order.by = "freq")
load("~/scratch/consensusML/boruta_supplement/bbs-nrank_rlist.rda")
genesi <- names(rl$bdat.iter$iter1$finalDecision)
um <- data.frame(geneid=genesi, stringsAsFactors = F)
um$nrank <- um$svm <- um$rf  <- um$xgb <- um$lasso <- 0
for(f in 1:length(fl)){
load(fl[f])
gff <- rl$feature.statfreq
gffid <- gff[gff$num.conf>0,]$gid
um[um$geneid %in% gffid, f+1] <- 1
message(f)
}
upset(um, order.by = "freq")
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE)))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE)))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="green",
active=TRUE)))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="forestgreen",
active=TRUE)))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
head(um)
load("sesetfilt_degseahack_targetaml.rda")
genes.txt1 <- um[um$nrank==1 & um$rf==1 & um$lasso==1 & um$svm==1,]$geneid
rowData(degfilt.se[genes.txt1,])
library(SummarizedExperiment)
rowData(degfilt.se[genes.txt1,])
rowData(degfilt.se[genes.txt1,])$hgnc_symbol
genes.txt1 <- um[um$nrank==1 & um$rf==1 & um$lasso==1 & um$svm==1,]$geneid
genes.txt1 <- rowData(degfilt.se[genes.txt1,])$hgnc_symbol
genes.txt1 <- genes.txt1[!genes.txt1==""]
genes.txt1.paste <- paste0(genes.txt1,collapse="\n")
grid.text(genes.txt1.paste, x=0.2, y=0.95, gp=gpar(fontsize=5), col="red")
?grid.text
grid.text(genes.txt1.paste, x=0.2, y=0.95, gp=gpar(fontsize=5, col="red"))
grid.text(genes.txt1.paste, x=0.5, y=0.95, gp=gpar(fontsize=5, col="red"))
genes.txt2 <- um[um$nrank==1 & um$lasso==1,]$geneid
genes.txt2 <- rowData(degfilt.se[genes.txt2,])$hgnc_symbol
genes.txt2 <- genes.txt2[!genes.txt2==""]
genes.txt2.paste <- paste0(genes.txt2,collapse="\n")
grid.text(genes.txt2.paste, x=0.6, y=0.95, gp=gpar(fontsize=5, col="blue"))
grid.text(genes.txt2.paste, x=0.65, y=0.95, gp=gpar(fontsize=5, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
genes.txt1 <- um[um$nrank==1 & um$rf==1 & um$lasso==1 & um$svm==1 & um$xgb==0,]$geneid
genes.txt1 <- rowData(degfilt.se[genes.txt1,])$hgnc_symbol
genes.txt1 <- genes.txt1[!genes.txt1==""]
genes.txt1.paste <- paste0(genes.txt1,collapse="\n")
genes.txt2 <- um[um$nrank==1 & um$lasso==1 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt2 <- rowData(degfilt.se[genes.txt2,])$hgnc_symbol
genes.txt2 <- genes.txt2[!genes.txt2==""]
genes.txt2.paste <- paste0(genes.txt2,collapse="\n")
genes.txt3 <- um[um$nrank==1 & um$lasso==0 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt3 <- rowData(degfilt.se[genes.txt3,])$hgnc_symbol
genes.txt3 <- genes.txt2[!genes.txt2==""]
genes.txt3.paste <- paste0(genes.txt2,collapse="\n")
genes.txt3 <- um[um$nrank==1 & um$lasso==0 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt3 <- rowData(degfilt.se[genes.txt3,])$hgnc_symbol
genes.txt3 <- genes.txt3[!genes.txt3==""]
genes.txt3.paste <- paste0(genes.txt3,collapse="\n")
grid.text(genes.txt1.paste, x=0.5, y=0.95, gp=gpar(fontsize=5, col="red"))
grid.text(genes.txt2.paste, x=0.65, y=0.95, gp=gpar(fontsize=5, col="blue"))
grid.text(genes.txt3.paste, x=0.75, y=0.95, gp=gpar(fontsize=5, col="purple"))
um20 <- data.frame(geneid=genesi, stringsAsFactors = F)
um20$nrank <- um20$svm <- um20$rf  <- um20$xgb <- um20$lasso <- 0
for(f in 1:length(fl)){
load(fl[f])
gff <- rl$feature.statfreq
gffid <- gff[gff$perc.conf>20,]$gid
um20[um20$geneid %in% gffid, f+1] <- 1
message(f)
}
um <- um20
# prep gene symbol text
genes.txt1 <- um[um$nrank==1 & um$rf==1 & um$lasso==1 & um$svm==1 & um$xgb==0,]$geneid
genes.txt1 <- rowData(degfilt.se[genes.txt1,])$hgnc_symbol
genes.txt1 <- genes.txt1[!genes.txt1==""]
genes.txt1.paste <- paste0(genes.txt1,collapse="\n")
genes.txt2 <- um[um$nrank==1 & um$lasso==1 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt2 <- rowData(degfilt.se[genes.txt2,])$hgnc_symbol
genes.txt2 <- genes.txt2[!genes.txt2==""]
genes.txt2.paste <- paste0(genes.txt2,collapse="\n")
genes.txt3 <- um[um$nrank==1 & um$lasso==0 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt3 <- rowData(degfilt.se[genes.txt3,])$hgnc_symbol
genes.txt3 <- genes.txt3[!genes.txt3==""]
genes.txt3.paste <- paste0(genes.txt3,collapse="\n")
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","svm","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# draw symbol text
grid.text(genes.txt1.paste, x=0.5, y=0.8, gp=gpar(fontsize=5, col="red"))
grid.text(genes.txt2.paste, x=0.65, y=0.8, gp=gpar(fontsize=5, col="blue"))
grid.text(genes.txt3.paste, x=0.75, y=0.8, gp=gpar(fontsize=5, col="purple"))
upset(um, order.by="freq")
genes.txt1 <- um[um$nrank==1 & um$rf==1 & um$lasso==1 & um$svm==0 & um$xgb==0,]$geneid
genes.txt1 <- rowData(degfilt.se[genes.txt1,])$hgnc_symbol
genes.txt1 <- genes.txt1[!genes.txt1==""]
genes.txt1.paste <- paste0(genes.txt1,collapse="\n")
genes.txt2 <- um[um$nrank==1 & um$lasso==1 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt2 <- rowData(degfilt.se[genes.txt2,])$hgnc_symbol
genes.txt2 <- genes.txt2[!genes.txt2==""]
genes.txt2.paste <- paste0(genes.txt2,collapse="\n")
genes.txt3 <- um[um$nrank==1 & um$lasso==0 & um$xgb==0 & um$rf==0 & um$svm==0,]$geneid
genes.txt3 <- rowData(degfilt.se[genes.txt3,])$hgnc_symbol
genes.txt3 <- genes.txt3[!genes.txt3==""]
genes.txt3.paste <- paste0(genes.txt3,collapse="\n")
# plot upset
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.5, y=0.8, gp=gpar(fontsize=5, col="red"))
grid.text(genes.txt2.paste, x=0.65, y=0.8, gp=gpar(fontsize=5, col="blue"))
grid.text(genes.txt3.paste, x=0.75, y=0.8, gp=gpar(fontsize=5, col="purple"))
grid.text(genes.txt1.paste, x=0.6, y=0.8, gp=gpar(fontsize=9, col="red"))
grid.text(genes.txt3.paste, x=0.66, y=0.8, gp=gpar(fontsize=9, col="purple"))
grid.text(genes.txt2.paste, x=0.7, y=0.8, gp=gpar(fontsize=9, col="blue"))
grid.text(genes.txt1.paste, x=0.55, y=0.5, gp=gpar(fontsize=9, col="red"))
grid.text(genes.txt3.paste, x=0.64, y=0.5, gp=gpar(fontsize=9, col="purple"))
grid.text(genes.txt2.paste, x=0.72, y=0.5, gp=gpar(fontsize=9, col="blue"))
grid.text(genes.txt1.paste, x=0.55, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.64, y=0.6, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.72, y=0.6, gp=gpar(fontsize=6, col="blue"))
grid.text(genes.txt1.paste, x=0.58, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.64, y=0.6, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.6, gp=gpar(fontsize=6, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.58, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.64, y=0.6, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.6, gp=gpar(fontsize=6, col="blue"))
grid.text(genes.txt1.paste, x=0.58, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.67, y=0.6, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.6, gp=gpar(fontsize=6, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.58, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.7, y=0.6, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.6, gp=gpar(fontsize=6, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.58, y=0.6, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.7, y=0.5, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.45, gp=gpar(fontsize=6, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.61, y=0.57, gp=gpar(fontsize=6, col="red"))
grid.text(genes.txt3.paste, x=0.7, y=0.5, gp=gpar(fontsize=6, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.5, gp=gpar(fontsize=6, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.61, y=0.64, gp=gpar(fontsize=8, col="red"))
grid.text(genes.txt3.paste, x=0.68, y=0.5, gp=gpar(fontsize=8, col="purple"))
grid.text(genes.txt2.paste, x=0.78, y=0.5, gp=gpar(fontsize=8, col="blue"))
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.61, y=0.64, gp=gpar(fontsize=8, col="red"))
grid.text(genes.txt3.paste, x=0.71, y=0.5, gp=gpar(fontsize=8, col="purple"))
grid.text(genes.txt2.paste, x=0.8, y=0.5, gp=gpar(fontsize=8, col="blue"))
jpeg("nrank-4algo_gconf20perc_upsetr.jpg", 7,5, units="in", res=400)
upset(um, order.by = "freq",
queries=list(list(query = intersects,
params = list("nrank","rf","lasso"),
color="red",
active=TRUE),
list(query = intersects,
params = list("nrank","lasso"),
color="blue",
active=TRUE),
list(query = intersects,
params = list("nrank"),
color="purple",
active=TRUE)))
# plot title
grid.text("Feature Overlap (>20% Iter. Confirmed)", x=0.6,
y=0.95, gp=gpar(fontsize=10))
# draw symbol text
grid.text(genes.txt1.paste, x=0.61, y=0.64, gp=gpar(fontsize=8, col="red"))
grid.text(genes.txt3.paste, x=0.71, y=0.5, gp=gpar(fontsize=8, col="purple"))
grid.text(genes.txt2.paste, x=0.8, y=0.5, gp=gpar(fontsize=8, col="blue"))
dev.off()
