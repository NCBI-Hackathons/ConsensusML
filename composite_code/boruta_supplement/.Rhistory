function() {
if(b == length(grid)) return(NULL)
b <<- b + 1L
gridIdx[[b]]
}
}
computer <- function(files) {
Reduce("intersect", lapply(files, readIDAT, what = "IlluminaIDs"))
}
reducer <- function(x, y) {
intersect(x,y)
}
rownames.out <- bpiterate(iterator(G.files, nArrays = nArrays),
FUN = computer,
REDUCE = reducer,
BPPARAM = BPPARAM)
}
if (sameArray && sameLength) {
first.file <- readIDAT(G.files[1])
rownames.out <- rownames(first.file$Quants)
}
ans_nrow <- length(rownames.out)
grid <- RegularArrayGrid(c(ans_nrow, ans_ncol),
c(ans_nrow, nArrays))
readAndCheck <- function(b, files, grid, sink, sink_lock, rownames.out) {
## Before calling this function, we ensure that rownames.out
## is a subset of the rownames in the file.
cat(".")
viewport <- grid[[b]]
col_range <- ranges(viewport)[2L]
col_indices <- seq(from = start(col_range), to = end(col_range))
Quants <- lapply(files[col_indices], function(xx) {
readIDAT(xx)[["Quants"]]
})
Mean <- do.call(cbind, lapply(Quants, function(xx) xx[rownames.out, "Mean", drop=FALSE]))
write_block(x = sink, viewport = viewport, block = Mean)
}
Gmean_sink <- HDF5RealizationSink(
dim = c(ans_nrow, ans_ncol),
filepath = file.path(dir, "assays.h5"),
dimnames = NULL, # NOTE: Never allow dimnames.
type = "integer",
name = "Green",
chunkdim = c(ans_nrow, nArrays.chunk))
on.exit(close(Gmean_sink), add = TRUE)
sink_lock <- ipcid()
on.exit(ipcremove(sink_lock), add = TRUE)
if(verbose)
message(sprintf("[read.metharray2]: reading %i Green files\n", length(G.files)))
Gmean <- bplapply(seq_along(grid),
FUN = readAndCheck,
files = G.files,
grid = grid,
sink = Gmean_sink,
sink_lock = sink_lock,
rownames.out = rownames.out,
BPPARAM = BPPARAM)
ipcremove(sink_lock)
Gmean <- as(Gmean_sink, "DelayedArray")
Rmean_sink <- HDF5RealizationSink(
dim = c(ans_nrow, ans_ncol),
filepath = file.path(dir, "assays.h5"),
dimnames = NULL, # NOTE: Never allow dimnames.
type = "integer",
name = "Red",
chunkdim = c(ans_nrow, nArrays.chunk))
on.exit(close(Rmean_sink), add = TRUE)
if(verbose)
message(sprintf("[read.metharray2]: reading %i Red files\n", length(R.files)))
Rmean <- bplapply(seq_along(grid),
FUN = readAndCheck,
files = R.files,
grid = grid,
sink = Rmean_sink,
sink_lock = sink_lock,
rownames.out = rownames.out,
BPPARAM = BPPARAM)
Rmean <- as(Rmean_sink, "DelayedArray")
out <- RGChannelSet(Red = Rmean, Green = Gmean)
rownames(out) <- rownames.out
colnames(out) <- names(G.files)
colData(out)$filename
## TODO: set annotation slot
out
}
save(read.metharray2,file="read_metharray2.rda")
setwd("~/")
load("~/read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
BiocManager::valid()
BiocManager::install("minfi", version = "3.9")
require()minfi
require(minfi)
BiocManager::install("mclust", version = "3.9")
?lgfortran
BiocManager::install("mclust", version = "3.9")
require(minfiData)
BiocManager::install("minfiData", version = "3.9")
BiocManager::install("minfi", version = "3.9")
install.packages("data.table")
install.packages("data.table")
library(data.table)
install.packages("data.table")
?bplapply
which(BiocManager)
?BiocManager
BiocManager::install()
BiocManager::valid()
install.packages("data.table")
library(data.table)
install.packages("data.table")
setwd("~/")
install.packages("data.table")
library(data.table)
library(minfi)
library(minfiData)
BiocManager::install("minfiData")
BiocManager::install("DelayedArray")
BiocManager::install("HDF5Array")
BiocManager::install("illuminaio")
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)) # returns error
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("Error reading in sample sheet. Returning...")
return(cond)
},
warning=function(cond){
message("Warning raised while trying to read in sample sheet. Returning...")
return(cond)
})
# fails with error:
# Error: BiocParallel errors
# element index: 4, 5, 6
# first error: HDF5. File accessibilty. Unable to open file.
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep5
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep6
dim(rep6)
dim(rep5)
rep5
sessionInfo()
library(rols)
termLabel("uberon", "UBERON:0002107")
termLabel(term("uberon", "UBERON:0002107"))
termLabel(term("uberon", "UBERON:0002107"))
?permutations
install.packages('gtools')
library(gtools)
?permutations
dattypes <- c("sra_stemcells", "sra_developmental", "sra_adult", "paired", "gtex")
permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
pd <- permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
head(pd)
pd <- permutations(n=2, r=5, v=c(0,1))
pd <- permutations(n=5, r=5, v=c(0,1))
?bitwOr
library(GEOmetadb)
citation("GEOmetadb")
which(minfi)
R.Version()
load("/Users/maden/scratch/consensusML/cml_share/borutadat_1.rda")
x <- bdat$ImpHistory
x
dim(x)
rownames(x)
x[1,1]
x[1,2]
x[2,1]
bdat$impSource
bdat$finalDecision
table(bdat$finalDecision)
bdat$light
bdat$maxRuns
bdat$mcAdj
bdat$roughfixed
bdat$call
bdat$ImpHistory
hist(x[,1])
hist(x[,2])
hist(x[,3])
table(bdat$finalDecision)
names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid <- names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid
hist(x[,cid[1]])
hist(x[,cid[2]])
hist(x[,cid[3]])
hist(x[,cid[4]])
hist(x[,cid[5]])
summary(x[,cid[1]])
summary(x[,cid[2]])
x[,cid[1]]
x[,cid[2]]
bdat$pValue
bdat$finalDecision
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm_md-decision-list.rda")
lx <- gsm.anno.decision.list
lx$GSM2334191
load("~/scratch/analysis_scratch/analysis_final_files/rs33k-gsmjsonfilt.rda")
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-manualanno-termfreqdflist.rda")
rmanno.list$age_dfs$age
head(rmanno.list$age_dfs$age)
rmanno.list$age_dfs$age[c(1:50),]
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm-metadata_naive-summary.rda")
head(rmsd)
head(rmsmd)
?pca
?princomp
setwd("~/scratch/analysis_scratch/analysis_final_files/md_manual_supplement")
get_ql <- function(mdl, qterm){
mdlq <- list()
for(g in 1:length(mdl)){
ggi <- mdl[[g]]
gidq <- c()
for(l in 1:length(ggi)){
gidq <- c(gidq, ggi[l][grepl(qterm,ggi[l])])
}
if(length(gidq)>0){
mdlq[[names(mdl)[g]]] <- mdl[[g]]
}
message(g)
}
return(mdlq)
}
# extract term instances for frequency analysis
getterm_ql <- function(mdl, qlabel){
qll <- list()
for(g in 1:length(mdl)){
ggi <- mdl[[g]]
gidq <- c()
for(l in 1:length(ggi)){
gidq <- c(gidq, ggi[l][grepl(qlabel,ggi[l])])
}
qll <- c(qll, as.character(gidq))
message(g)
}
return(unlist(qll))
}
library(data.table)
library(jsonlite)
syssep = "/"
gsm.json.dir = "gsm_json" # dir containing filtered sample json files
gsm.jsonfilt.destdir = "gsm_json_filt" # new dir to store filtered json files
rs.fn <- "1548876778.rsheet" # filename of rsheet
# load the rsheet
rs <- fread("1548876778.rsheet", sep = ' ', fill=T, header=T)
lfj <- list.files(gsm.json.dir)
lfj.filt <- lfj[grepl("soft.json", lfj)]
# extract gsm ids from json filenames
gsm.id <- as.character(sapply(lfj.filt, function(x){unlist(strsplit(x, "\\."))[2]}))
length(gsm.id) # 36772
length(unique(gsm.id)) # 35280
gsm.uid <- unique(gsm.id)
mdl <- list()
for(i in 1:length(gsm.uid)){
gsmi <- gsm.uid[i]
frj <- lfj.filt[grepl(gsmi,lfj.filt)][1]
gjsoni <- jsonlite::fromJSON(txt = paste(gsm.json.dir, frj, sep="/"))
re <- gjsoni
re.keys <- names(re)
rf <- list()
for(k in 1:length(keys.list)){
rekf <- re.keys[grepl(keys.list[k],re.keys)]
if(length(rekf) > 0){
for(f in 1:length(rekf)){
rf[[rekf[f]]] <- as.character(unlist(re[rekf[f]]))
}
}
}
mdl[[gsmi]] <- rf
message(i)
}
keys.list <- c("!Sample_characteristics_ch1",
"!Sample_source_name_ch1",
"!Sample_title")
# read in the soft-extracted json files
lfj <- list.files(gsm.json.dir)
lfj.filt <- lfj[grepl("soft.json", lfj)]
# extract gsm ids from json filenames
gsm.id <- as.character(sapply(lfj.filt, function(x){unlist(strsplit(x, "\\."))[2]}))
length(gsm.id) # 36772
length(unique(gsm.id)) # 35280
gsm.uid <- unique(gsm.id)
# compile and filter sample json content
mdl <- list()
for(i in 1:length(gsm.uid)){
gsmi <- gsm.uid[i]
frj <- lfj.filt[grepl(gsmi,lfj.filt)][1]
gjsoni <- jsonlite::fromJSON(txt = paste(gsm.json.dir, frj, sep="/"))
re <- gjsoni
re.keys <- names(re)
rf <- list()
for(k in 1:length(keys.list)){
rekf <- re.keys[grepl(keys.list[k],re.keys)]
if(length(rekf) > 0){
for(f in 1:length(rekf)){
rf[[rekf[f]]] <- as.character(unlist(re[rekf[f]]))
}
}
}
mdl[[gsmi]] <- rf
message(i)
}
save(mdl, file="mdgsm_jsonfilt_doclist.rda")
setwd("~/scratch/consensusML/boruta_supplement")
setwd("~/scratch/consensusML/manuscript_draft/programming_resources/boruta_supplement")
