intronic_parts2[intronic_parts2$gene_id=='926']
library(keras)
keras_model_sequential()
install_packages("tensorflow")
install.packages("tensorflow")
install.packages("tensorflow")
keras_model_sequential()
library(keras)
keras_model_sequential()
library(tensorflow)
keras_model_sequential()
library(keras)
keras_model_sequential()
install.packages("tensorflow")
install.packages("tensorflow")
keras_model_sequential()
library(keras)
install_keras()
install_keras()
library(keras)
install_keras()
install.packages("keras", type = "source")
install.packages("keras", type = "source")
library(keras)
install_keras()
reticulate::conda_version()
library(keras)
install.packages("keras")
library(keras)
utils::install.packages("keras")
library(keras)
install.packages("keras")
library(keras)
devtools::install_github("rstudio/keras")
library(keras)
library(keras)
install.packages("leras")
install.packages("keras")
install.packages("R")
install.packages("heatmap.2")
install.packages("heatmap2")
install.packages("pvclust")
install.packages("keras")
?install.packages
install.packages("keras",libs_oly=TRUE)
install.packages("keras",libs_only=TRUE)
install.packages("Rcpp")
install_github("rstudio/reticulate")
library(devtools)
install_github("rstudio/reticulate")
install.packages("keras")
install.packages("keras", type="mac.binary", dependencies=TRUE)
install.packages("keras", dependencies=TRUE)
library(randomForest)
?randomForest
?install.packages
.libOpts
which R
which('R')
R.Version
R.Version()
R.Version()$minor
if (!requireNamespace("BiocManager", quietly=TRUE))
)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite(c("TCGAbiolinks"))
library(minfi)
?minfi::read.metharray2
??read.metharray2
read.metharray2 <- function(basenames,
extended = FALSE,
verbose = FALSE,
dir = "my_h5_se",
nArrays = 1,
BPPARAM = bpparam("SerialParam"),
nArrays.chunk = 1) {
## This function assumes that all IDATs are identical.
## This is not a safe assumption; will be relaxed later.
## At least I check for it.
## Setting up file names
basenames <- sub("_Grn\\.idat.*", "", basenames)
basenames <- sub("_Red\\.idat.*", "", basenames)
stopifnot(!anyDuplicated(basenames))
G.files <- paste(basenames, "_Grn.idat", sep = "")
names(G.files) <- basename(basenames)
these.dont.exists <- !file.exists(G.files)
if (any(these.dont.exists)) {
G.files[these.dont.exists] <- paste0(G.files[these.dont.exists], ".gz")
}
if (!all(file.exists(G.files))) {
noexits <- sub("\\.gz", "", G.files[!file.exists(G.files)])
stop("The following specified files do not exist:",
paste(noexits, collapse = ", "))
}
R.files <- paste(basenames, "_Red.idat", sep = "")
names(R.files) <- basename(basenames)
these.dont.exists <- !file.exists(R.files)
if (any(these.dont.exists)) {
R.files[these.dont.exists] <- paste0(R.files[these.dont.exists], ".gz")
}
if (!all(file.exists(R.files))) {
noexits <- R.files[!file.exists(G.files)]
stop("The following specified files do not exist:",
paste(noexits, collapse = ", "))
}
ans_ncol <- length(G.files)
## First we check whether these are all the same array type and has the
## same number of probes
nProbes <- sapply(G.files, readIDAT, what = "nSNPsRead") # FIXME: potentially parallize this
arrayTypes <- cbind(do.call(rbind, lapply(nProbes, minfi:::.guessArrayTypes)),
size = nProbes)
sameLength <- (length(unique(arrayTypes[, "size"])) == 1)
sameArray <- (length(unique(arrayTypes[, "array"])) == 1)
if (!sameArray) {
cat("[read.metharray2] Trying to parse IDAT files from different arrays.\n")
cat("  Inferred Array sizes and types:\n")
print(arrayTypes[, c("array", "size")])
stop("[read.metharray2] Trying to parse different IDAT files, of ",
"different size and type." )
}
if (sameArray && !sameLength && !force) {
stop("[read.metharray] Trying to parse IDAT files with different ",
"array size but seemingly all of the same type.\n  You can force ",
"this by 'force=TRUE', see the man page ?read.metharray")
}
if (sameArray && !sameLength && force) {
## get the rownames as bpiterate
iterator <- function(files, nArrays) {
grid <- RegularArrayGrid(length(files), nArrays)
gridIdx <- lapply(seq_along(grid), function(xx) {
ir <- ranges(grid[[xx]])
seq(from = start(ir), to = end(ir))
})
b <- 0L
function() {
if(b == length(grid)) return(NULL)
b <<- b + 1L
gridIdx[[b]]
}
}
computer <- function(files) {
Reduce("intersect", lapply(files, readIDAT, what = "IlluminaIDs"))
}
reducer <- function(x, y) {
intersect(x,y)
}
rownames.out <- bpiterate(iterator(G.files, nArrays = nArrays),
FUN = computer,
REDUCE = reducer,
BPPARAM = BPPARAM)
}
if (sameArray && sameLength) {
first.file <- readIDAT(G.files[1])
rownames.out <- rownames(first.file$Quants)
}
ans_nrow <- length(rownames.out)
grid <- RegularArrayGrid(c(ans_nrow, ans_ncol),
c(ans_nrow, nArrays))
readAndCheck <- function(b, files, grid, sink, sink_lock, rownames.out) {
## Before calling this function, we ensure that rownames.out
## is a subset of the rownames in the file.
cat(".")
viewport <- grid[[b]]
col_range <- ranges(viewport)[2L]
col_indices <- seq(from = start(col_range), to = end(col_range))
Quants <- lapply(files[col_indices], function(xx) {
readIDAT(xx)[["Quants"]]
})
Mean <- do.call(cbind, lapply(Quants, function(xx) xx[rownames.out, "Mean", drop=FALSE]))
write_block(x = sink, viewport = viewport, block = Mean)
}
Gmean_sink <- HDF5RealizationSink(
dim = c(ans_nrow, ans_ncol),
filepath = file.path(dir, "assays.h5"),
dimnames = NULL, # NOTE: Never allow dimnames.
type = "integer",
name = "Green",
chunkdim = c(ans_nrow, nArrays.chunk))
on.exit(close(Gmean_sink), add = TRUE)
sink_lock <- ipcid()
on.exit(ipcremove(sink_lock), add = TRUE)
if(verbose)
message(sprintf("[read.metharray2]: reading %i Green files\n", length(G.files)))
Gmean <- bplapply(seq_along(grid),
FUN = readAndCheck,
files = G.files,
grid = grid,
sink = Gmean_sink,
sink_lock = sink_lock,
rownames.out = rownames.out,
BPPARAM = BPPARAM)
ipcremove(sink_lock)
Gmean <- as(Gmean_sink, "DelayedArray")
Rmean_sink <- HDF5RealizationSink(
dim = c(ans_nrow, ans_ncol),
filepath = file.path(dir, "assays.h5"),
dimnames = NULL, # NOTE: Never allow dimnames.
type = "integer",
name = "Red",
chunkdim = c(ans_nrow, nArrays.chunk))
on.exit(close(Rmean_sink), add = TRUE)
if(verbose)
message(sprintf("[read.metharray2]: reading %i Red files\n", length(R.files)))
Rmean <- bplapply(seq_along(grid),
FUN = readAndCheck,
files = R.files,
grid = grid,
sink = Rmean_sink,
sink_lock = sink_lock,
rownames.out = rownames.out,
BPPARAM = BPPARAM)
Rmean <- as(Rmean_sink, "DelayedArray")
out <- RGChannelSet(Red = Rmean, Green = Gmean)
rownames(out) <- rownames.out
colnames(out) <- names(G.files)
colData(out)$filename
## TODO: set annotation slot
out
}
save(read.metharray2,file="read_metharray2.rda")
setwd("~/")
load("~/read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
BiocManager::valid()
BiocManager::install("minfi", version = "3.9")
require()minfi
require(minfi)
BiocManager::install("mclust", version = "3.9")
?lgfortran
BiocManager::install("mclust", version = "3.9")
require(minfiData)
BiocManager::install("minfiData", version = "3.9")
BiocManager::install("minfi", version = "3.9")
install.packages("data.table")
install.packages("data.table")
library(data.table)
install.packages("data.table")
?bplapply
which(BiocManager)
?BiocManager
BiocManager::install()
BiocManager::valid()
install.packages("data.table")
library(data.table)
install.packages("data.table")
setwd("~/")
install.packages("data.table")
library(data.table)
library(minfi)
library(minfiData)
BiocManager::install("minfiData")
BiocManager::install("DelayedArray")
BiocManager::install("HDF5Array")
BiocManager::install("illuminaio")
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)) # returns error
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("Error reading in sample sheet. Returning...")
return(cond)
},
warning=function(cond){
message("Warning raised while trying to read in sample sheet. Returning...")
return(cond)
})
# fails with error:
# Error: BiocParallel errors
# element index: 4, 5, 6
# first error: HDF5. File accessibilty. Unable to open file.
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep5
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep6
dim(rep6)
dim(rep5)
rep5
sessionInfo()
library(rols)
termLabel("uberon", "UBERON:0002107")
termLabel(term("uberon", "UBERON:0002107"))
termLabel(term("uberon", "UBERON:0002107"))
?permutations
install.packages('gtools')
library(gtools)
?permutations
dattypes <- c("sra_stemcells", "sra_developmental", "sra_adult", "paired", "gtex")
permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
pd <- permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
head(pd)
pd <- permutations(n=2, r=5, v=c(0,1))
pd <- permutations(n=5, r=5, v=c(0,1))
?bitwOr
setwd("~/Documents/GitHub/ConsensusML/composite_code/rnotebook/data")
load("~/Documents/GitHub/ConsensusML/composite_code/rnotebook/data/sesetfilt_degseahack_targetaml.rda")
library(SummarizedExperiment)
genetable <- rowdata(degfilt.se)
genetable <- as.data.frame(rowData(degfilt.se))
exprtable <- as.data.frame(assay(degfilt.se))
?SummarizedExperiment
sampletable <- as.data.frame(colData(degfilt.se))
head(sampletable)
write.csv(genetable,"deginfo.csv")
write.csv(exprtable,"degexpr.csv")
write.csv(sampletable,"sampleinfo.csv")
head(genetable)
