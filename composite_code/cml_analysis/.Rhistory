require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)) # returns error
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2))
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("Error reading in sample sheet. Returning...")
return(cond)
},
warning=function(cond){
message("Warning raised while trying to read in sample sheet. Returning...")
return(cond)
})
# fails with error:
# Error: BiocParallel errors
# element index: 4, 5, 6
# first error: HDF5. File accessibilty. Unable to open file.
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep5
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep6
dim(rep6)
dim(rep5)
rep5
sessionInfo()
library(rols)
termLabel("uberon", "UBERON:0002107")
termLabel(term("uberon", "UBERON:0002107"))
termLabel(term("uberon", "UBERON:0002107"))
?permutations
install.packages('gtools')
library(gtools)
?permutations
dattypes <- c("sra_stemcells", "sra_developmental", "sra_adult", "paired", "gtex")
permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
pd <- permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
head(pd)
pd <- permutations(n=2, r=5, v=c(0,1))
pd <- permutations(n=5, r=5, v=c(0,1))
?bitwOr
setwd("~/Documents/GitHub/ConsensusML/composite_code/cml_analysis")
library(SummarizedExperiment)
library(gridExtra)
library(FactoMineR)
library(factoextra)
library(ggbiplot)
library(enrichR)
library(UpSetR)
library(ggcorrplot)
library(Rtsne)
#library(Rtsne)
load("sesetfilt_degseahack_targetaml.rda")
data = assay(degfilt.se)
st <- read.csv("standouttable.csv")
lasso1rank = rank(st$lasso_coef_rep1)
svm1rank = rank(st$svm1_weights)
xg5rank = rank(st$xg5_imp)
rf10krank = rank(st$rfnb_10k_MeanDecNodeImp)
# append pca ranks
pcdf <- pccont
pcdf <- pcdf[order(match(pcdf$name, st$X)),]
identical(pcdf$name, st$X)
pcvc1 <- rank(pcdf$cont_pca1)
pcvc123 <- rank(pcdf$cont_pca123)
# rankdf
rankdf.all = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1,
pcc123=pcvc123)
cormat.all <- round(cor(rankdf.all,method="spearman"),3)
data_pca <- prcomp(t(data), scale.=T)
res.pca <- PCA(t(data), graph = FALSE)
# get gene contributions to components 1 and 1:3
# note: the following is informed by function 'fviz_contrib'
X = data_pca
choice = "var"
axes = 1 # first pc
dd1 <- facto_summarize(X, element = choice, result = "contrib",
axes = axes)
axes = c(1,2,3) # first 3 pcs
dd123 <- facto_summarize(X, element = choice, result = "contrib",
axes = axes)
identical(dd1$name,dd123$name)
colnames(dd1) <- c("name","cont_pca1")
pccont <- cbind(dd1,data.frame(cont_pca123=dd123$contrib))
# append whether feature is above/below uniformity threshold
contrib <- pccont$cont_pca1
names(contrib) <- rownames(dd)
theo_contrib1 <- 100/length(contrib)
axes = c(1,2,3) # first 3 pcs
eig <- get_eigenvalue(X)[axes, 1]
theo_contrib123 <- sum(theo_contrib1 * eig)/sum(eig)
pccont$above_theoimp_pc1 <- ifelse(pccont$cont_pca1>theo_contrib1,"Y","N")
pccont$above_theoimp_pc123 <- ifelse(pccont$cont_pca123>theo_contrib123,"Y","N")
table(pccont$above_theoimp_pc1, pccont$above_theoimp_pc123)
#    N   Y
# N 807 303
# Y 239 635
lasso1rank = rank(st$lasso_coef_rep1)
svm1rank = rank(st$svm1_weights)
xg5rank = rank(st$xg5_imp)
rf10krank = rank(st$rfnb_10k_MeanDecNodeImp)
# append pca ranks
pcdf <- pccont
pcdf <- pcdf[order(match(pcdf$name, st$X)),]
identical(pcdf$name, st$X)
pcvc1 <- rank(pcdf$cont_pca1)
pcvc123 <- rank(pcdf$cont_pca123)
# rankdf
rankdf.all = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1,
pcc123=pcvc123)
cormat.all <- round(cor(rankdf.all,method="spearman"),3)
stsub <- st[!st$lasso_coef_rep1==0,]
summary(stsub$xg5_imp)
stsub$xg5_imp
stsub <- st[!st$lasso_coef_rep1==0,]
pcdfsub <- pcdf[!st$lasso_coef_rep1==0,]
lasso1rank = rank(stsub$lasso_coef_rep1)
svm1rank = rank(stsub$svm1_weights)
xg5rank = rank(stsub$xg5_imp)
rf10krank = rank(stsub$rfnb_10k_MeanDecNodeImp)
pcvc1sub <- rank(pcdfsub$cont_pca1)
pcvc123sub <- rank(pcdfsub$cont_pca123)
rankdf.sub = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1sub,
pcc123=pcvc123sub)
cormat.lasso1 <- round(cor(rankdf.sub, method="spearman"),3)
stsub <- st[!st$xg5_imp==0,]
pcdfsub <- pcdf[!st$xg5_imp==0,]
lasso1rank = rank(stsub$lasso_coef_rep1)
svm1rank = rank(stsub$svm1_weights)
xg5rank = rank(stsub$xg5_imp)
rf10krank = rank(stsub$rfnb_10k_MeanDecNodeImp)
pcvc1sub <- rank(pcdfsub$cont_pca1)
pcvc123sub <- rank(pcdfsub$cont_pca123)
rankdf.sub = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1sub,
pcc123=pcvc123sub)
cormat.xg5genes <- round(cor(rankdf.sub, method="spearman"),3)
cp1 <- ggcorrplot(cormat.all, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="All DEGs") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
cp2 <- ggcorrplot(cormat.lasso1, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="Lasso1 Genes") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
cp3 <- ggcorrplot(cormat.xg5genes, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="XGB5 Genes") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
# composite plot
jpeg("corhmmulti_consensusimprank.jpg", 12, 4, units="in", res=400)
grid.arrange(cp1,cp2,cp3,layout_matrix=matrix(c(1,2,3), nrow=1, byrow=TRUE))
dev.off()
table(pccont$above_theoimp_pc1)
# upset for filtered gene lists
jpeg(paste0("upset_cmlmodelgenes.jpg",collapse=""),5,3,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(lplot),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
usig <- list()
usig[["lasso1"]] = as.character(st[!st$lasso_coef_rep1==0,]$ensembl_gene_id)
usig[["svm1"]] = as.character(st[abs(st$svm1_weights)>=0.008,]$ensembl_gene_id)
usig[["rf10"]] = as.character(st[abs(st$rfnb_10k_MeanDecNodeImp)>=0.1,]$ensembl_gene_id)
usig[["xg5"]] = as.character(st[!st$xg5_imp==0,]$ensembl_gene_id)
usig[["pc1"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
usig[["pc123"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
# upset for filtered gene lists
jpeg(paste0("upset_cmlmodelgenes.jpg",collapse=""),5,3,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(lplot),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
usig <- list()
usig[["lasso1"]] = as.character(st[!st$lasso_coef_rep1==0,]$ensembl_gene_id)
usig[["svm1"]] = as.character(st[abs(st$svm1_weights)>=0.008,]$ensembl_gene_id)
usig[["rf10"]] = as.character(st[abs(st$rfnb_10k_MeanDecNodeImp)>=0.1,]$ensembl_gene_id)
usig[["xg5"]] = as.character(st[!st$xg5_imp==0,]$ensembl_gene_id)
usig[["pc1"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
usig[["pc123"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
# upset for filtered gene lists
jpeg("upset_cmlmodelgenes.jpg",5,3,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(usig),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
usig
length(usig)
names(usig)
jpeg("upset_cmlmodelgenes.jpg",5,3,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(usig),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
jpeg("upset_cmlmodelgenes.jpg",7,5,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(usig),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
usig[[1]]
usig[[2]]
usig <- list()
usig[["lasso1"]] = as.character(st[!st$lasso_coef_rep1==0,]$X)
usig[["svm1"]] = as.character(st[abs(st$svm1_weights)>=0.008,]$X)
usig[["rf10"]] = as.character(st[abs(st$rfnb_10k_MeanDecNodeImp)>=0.1,]$X)
usig[["xg5"]] = as.character(st[!st$xg5_imp==0,]$X)
usig[["pc1"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
usig[["pc123"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
# upset for filtered gene lists
jpeg("upset_cmlmodelgenes.jpg",7,5,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(usig),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
usig <- list()
usig[["lasso1"]] = as.character(st[!st$lasso_coef_rep1==0,]$X)
usig[["svm1"]] = as.character(st[abs(st$svm1_weights)>=0.008,]$X)
usig[["rf10"]] = as.character(st[abs(st$rfnb_10k_MeanDecNodeImp)>=0.1,]$X)
usig[["xg5"]] = as.character(st[!st$xg5_imp==0,]$X)
usig[["pc1"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
usig[["pc123"]] = pccont[pccont$above_theoimp_pc1=="Y",]$name
for(i in 1:length(usig)){
names(usig)[i] <- paste0(names(usig)[i]," (",length(usig[[i]])," genes)",collapse="")
}
# upset for filtered gene lists
jpeg("upset_cmlmodelgenes.jpg",7,5,units="in", res=400)
upset(fromList(usig), order.by = "freq", nsets=length(usig),
sets.bar.color = "blue", main.bar.color = "red")
grid.text("Overlap in Selected and Filtered\nModel Genes", x=0.65, y=0.95, gp=gpar(fontsize=9))
dev.off()
lasso1rank = rank(st$lasso_coef_rep1)
svm1rank = rank(st$svm1_weights)
xg5rank = rank(st$xg5_imp)
rf10krank = rank(st$rfnb_10k_MeanDecNodeImp)
# append pca ranks
pcdf <- pccont
pcdf <- pcdf[order(match(pcdf$name, st$X)),]
identical(pcdf$name, st$X)
pcvc1 <- rank(pcdf$cont_pca1)
pcvc123 <- rank(pcdf$cont_pca123)
# rankdf
rankdf.all = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1,
pcc123=pcvc123)
cormat.all <- round(cor(rankdf.all,method="spearman"),3)
# correlation analysis among gene subsets
# among lasso1 genes, with reranking
stsub <- st[!st$lasso_coef_rep1==0,]
pcdfsub <- pcdf[!st$lasso_coef_rep1==0,]
lasso1rank = rank(stsub$lasso_coef_rep1)
svm1rank = rank(stsub$svm1_weights)
xg5rank = rank(stsub$xg5_imp)
rf10krank = rank(stsub$rfnb_10k_MeanDecNodeImp)
pcvc1sub <- rank(pcdfsub$cont_pca1)
pcvc123sub <- rank(pcdfsub$cont_pca123)
rankdf.sub = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1sub,
pcc123=pcvc123sub)
cormat.lasso1 <- round(cor(rankdf.sub, method="spearman"),3)
# among xg5 genes, with reranking
stsub <- st[!st$xg5_imp==0,]
pcdfsub <- pcdf[!st$xg5_imp==0,]
lasso1rank = rank(stsub$lasso_coef_rep1)
svm1rank = rank(stsub$svm1_weights)
xg5rank = rank(stsub$xg5_imp)
rf10krank = rank(stsub$rfnb_10k_MeanDecNodeImp)
pcvc1sub <- rank(pcdfsub$cont_pca1)
pcvc123sub <- rank(pcdfsub$cont_pca123)
rankdf.sub = data.frame(lasso1=lasso1rank,
svm1=svm1rank,
xg5=xg5rank,
rf10k=rf10krank,
pcc1=pcvc1sub,
pcc123=pcvc123sub)
cormat.xg5genes <- round(cor(rankdf.sub, method="spearman"),3)
#-----------------------------
# Correlations Visualizations
#-----------------------------
cp1 <- ggcorrplot(cormat.all, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="All DEGs") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
cp2 <- ggcorrplot(cormat.lasso1, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="Lasso1 Genes") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
cp3 <- ggcorrplot(cormat.xg5genes, hc.order = FALSE, type = "lower",
outline.col = "white",
legend.title="Rho", title="XGB5 Genes") +
geom_tile(colour = "black") +
geom_text(aes(label = round(value, 1)))
# composite plot
jpeg("corhmmulti_consensusimprank.jpg", 12, 4, units="in", res=400)
grid.arrange(cp1,cp2,cp3,layout_matrix=matrix(c(1,2,3), nrow=1, byrow=TRUE))
dev.off()
jpeg("corhmmulti_consensusimprank.jpg", 10, 4, units="in", res=400)
grid.arrange(cp1,cp2,cp3,layout_matrix=matrix(c(1,2,3), nrow=1, byrow=TRUE))
dev.off()
